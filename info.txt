Virtual Environment 
  start:- py -m venv venv 
  activate:- venv\Scripts\activate
  install django:- pip install django 
  start:- django-admin startproject <project_name> . 
      

 Adding view to every page in django 

///////////
 First of all, when it comes to web development you really want to avoid hard coding paths in your templates. The reason for this is that paths might change, and it will be a hassle to go through all your HTML and templates to find every single URL or path and update it manually. It makes your code much harder to maintain.

The solution to this is to define functions that return the URL instead. This is where get_absolute_url() comes into the picture.

Example:

<!-- Bad -->
<a href="/language/category/product/{{product.pk}}">Link</a>

<!-- Good -->
<a href="{{product.get_absolute_url}}">Link</a>

//////////////

URL ROUTING AND TEMPLATING 

Up until now, we have been hardcoding URLs in our templates. At a later date, If we want to update the URL structure we would have to manually visit each and every template. This problem can be solved easily by using the url tag in the templates.


The url tag helps us to generate links in the templates. It has the following syntax:

URL TAG 
Syntax: {% url 'url_name' arg1 arg2 %}

where url_name is the value we passed to the name keyword argument of the url() function. 
The arg1 and arg1 are additional arguments required by the view function. On success, 
it returns part of the URL without host portion. If it can't create URL NoReverseMatch 
exception is thrown.


The reverse() function
What if a need arises to generate URLs in the in the Python code, for example in a view 
function? To create URLs in Python code we use the reverse() function.

{% url 'new_patter' arg1 arg2 arg2 %}  parameter passing 

reverse('<app_name>: post_by_category', args=['css'])



Two ways for a view function to work 
:- It loads the template with the desired objects (render)
:- we can redirect the same template ,and just make sure that the url function 
  having the desired functionality can be called on a press of a button etc 



GENERIC VIEWS 
from django.views.generic.edit import CreateView
from .models import GeeksModel

class GeeksCreate(CreateView):

	# specify the model for create view
	model = GeeksModel

	# specify the fields to be displayed

	fields = ['title', 'description']

  <form method="POST" enctype="multipart/form-data">

    <!-- Security token -->
    {% csrf_token %}
  
    <!-- Using the formset -->
    {{ form.as_p }}
    
    <input type="submit" value="Submit">
  </form>
  


FORMAT TO AVOID STUPID TUPLE ERROR 
  path('register/',views.VendorRegisterView.as_view(template_name = 'vendor/register.html'),name='vendor-register'),



RELATED NAME 

The related_name attribute specifies the name of the reverse relation from the User 
model back to your model.

If you don't specify a related_name, Django automatically creates one using
 the name of your model with the suffix _set, for instance User.map_set.all().

If you do specify, e.g. related_name=maps on the User model, 
User.map_set will still work, but the User.maps. syntax is obviously a bit cleaner 
and less clunky; so for example, if you had a user object current_user, 
you could use current_user.maps.all() to get all instances of your Map model 
that have a relation to current_user.

The Django documentation has more details.


ON DELETE ARGUMEMT

1. CASCADE
When the on_delete argument is set to cascade then deleting the referenced object will have 
substantial effect on the referred objects. This means when the referenced object is deleted 
from the database then all the entries of the object will also be deleted from the 
entire database. This is how the CASCADE option works in the background. So, there are some 
impacts on data integrity as far as the CASCADE options is concerned.

2. PROTECT
PROTECT is the direct opposite of cascade option, here if there is impact on the actual object 
then all instances of the data on the referenced object are not deleted. So, no deletion happens.
 This makes the data to be protected before delete processing on the referenced object.

3. RESTRICT
The RESTRICT is very similar to the PROTECT option, it does the same job just as like the 
deletion option. The only difference here is when deletion is targeted on the referenced 
object then the ON_DELETE will raise an error called the RestrictedError. But the RESTRICT 
will allow deletion to happen when the referencing object and the object which is referenced 
object is allotted with a reference to a different common object then the deletion is allowed
to takes place.

4. SET_NULL
The option functions in the same way the name suggests, when a deletion happens to the referenced
 object then the value of the referencing object will be updated as NULL. So a NULL value will be 
 placed for the referencing object. This is how the SET NULL will operate basically.

5. SET_DEFAULT
The option functions in the same way the name suggests, when a deletion happens to the referenced 
object then the value of the referencing object will be updated with a default value which it is 
allotted for, so all instances of the referencing object will be allotted with this default 
value. So a default value will be placed for the referencing object. This is how the SET DEFAULT 
will operate basically.


DJANGO ORM RELATION MANAGER
https://medium.com/hackernoon/django-orm-relationships-cheat-sheet-14433d6cf68c


GOOGLE CONSOLE 
https://dev.to/mdrhmn/django-google-authentication-using-django-allauth-18f8

DOMAINS AND DNS SERVICES
https://docs.digitalocean.com/products/networking/dns/how-to/manage-records/