The . simply means "current working directory"

docker build
In the context of the docker build command, you are using it to signal that the build context 
for docker build is the current working directory. Like so:

docker build -t mytag:0.1 .
Let's say that you have this structure:

/home/me/myapp/
├── Dockerfile
├── theapp.py
And you invoke the docker build command from /home/me/myapp - you will pass the current working 
directory as the build context. This means that docker will see the following filestructure when building:

/
├── Dockerfile
├── theapp.py
Dockerfile
In the context of a Dockerfile, it means that same. Both inside and outside the image.

Take this COPY instruction for example:

COPY . /app
Here the . means the current working directory, where the docker build command is executed. 
This will be relative the to build context that is passed to the docker build command.

For this COPY instruction:

COPY theapp.py .
It means, take the file theapp.py and copy it to the working directory of the docker image 
that is being built. This directory can be set at build time with the WORKDIR instruction, so that:

WORKDIR /app
COPY theapp.py .
Would leave you with the file /app/theapp.py inside the resulting docker image.

Finally, this COPY instruction:

COPY . .
Means take everything from the working directory where the docker build command is issued, 
relative to the build context that is passed to it. And copy it to the current working 
directory of the docker image.


docker-compose run django django-admin startproject core .
docker exec -it postgres psql -U postgres

docker-compose up / down

Postgres
==========

docker exec -it postgres psql -U postgres
\c <database_name>
\d
\d+ <table_name>
\q


==========
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'pgdb',
        'PORT': 5432,
    }
}



Docker rmi
docker rmi removes images by their ID.

To remove the image, you first need to list all the images to get the Image IDs, Image name and other details. By running simple command docker images -a or docker images.

After that you make sure which image want to remove, to do that executing this simple command docker rmi <your-image-id>. Then you can confirm that image has been removed or not by list all the images and check.

Remove multiple images
There is a way to remove more than one images at a time, when you want to remove multiple specific images. So to do that first get Image IDs simply by listing the images then execute simple followed command.

docker rmi <your-image-id> <your-image-id> ...

Write Images IDs in the command followed by the spaces between them.

Remove all images at once
To remove all images there is a simple command to do that. docker rmi $(docker images -q)

Here in the above command, there are two command the first which execute in the $() is shell syntax and returns the results whatever executed in that syntax. So in this -q- is a option is used to provide to return the unique IDs,$() returns the results of image IDs and then docker rmi removes all those images.

For More Information:
Docker CLI docs: rmi
Docker rm
docker rm removes containers by their name or ID.

When you have Docker containers running, you first need to stop them before deleting them.

Stop all running containers: docker stop $(docker ps -a -q)
Delete all stopped containers: docker rm $(docker ps -a -q)
Remove multiple containers
You can stop and delete multiple containers by passing the commands a list of the containers you want to remove. The shell syntax $() returns the results of whatever is executed within the brackets. So you can create your list of containers within this to be passed to the stop and rm commands.

Here is a breakdown of docker ps -a -q
docker ps list containers
-a the option to list all containers, even stopped ones. Without this, it defaults to only listing running containers
-q the quiet option to provide only container numeric IDs, rather than a whole table of information about containers


You need to add a dot, which means to use the Dockerfile in the local directory.

For example:

docker build -t mytag .

It means you use the Dockerfile in the local directory, and if you use docker 1.5 you can specify a Dockerfile elsewhere. Extract from the help output from docker build:

-f, --file=""        Name of the Dockerfile(Default is 'Dockerfile' at context root)




When run the command 

=> [internal] load build definition from Dockerfile                                                          0.1s 
=> => transferring dockerfile: 596B                                                                          0.0s 
=> [internal] load .dockerignore                                                                             0.1s 
=> => transferring context: 2B                                                                               0.0s 
=> [internal] load metadata for docker.io/library/python:3                                                  15.7s 
=> [auth] library/python:pull token for registry-1.docker.io                                                 0.0s 
=> CACHED [1/6] FROM docker.io/library/python:3@sha256:a780eec51b47c0684d81315d48524b92e84873f93558f8637333  0.0s 
=> [internal] load build context                                                                           100.8s 
=> => transferring context: 118.57MB                                                                       100.7s 
=> [2/6] WORKDIR /code                                                                                       0.1s 
=> [3/6] COPY requirements.txt /code/                                                                        0.6s 
=> [4/6] RUN pip install --upgrade pip                                                                       6.1s 
=> [5/6] RUN pip install -r requirements.txt                                                                32.7s 
=> [6/6] COPY . /code/                                                                                       2.4s 
=> exporting to image                                                                                        2.1s 
=> => exporting layers                                                                                       2.0s 
=> => writing image sha256:0366a73c0d8b59478670113d9f11da25457f44207ee871c3b681babe3645227a                  0.0s 
=> => naming to docker.io/library/django-ecommerce:1.0 


What is the docker entry-point shell file?
entry point shell file is created to run the command after the container image in a docker
environment. sometimes we need to run command which is related to application configuration,
application database migration and application status check, create the scheduler to run 
the different tasks, all of the instruction we can declare at entry point shell file, add 
those entry point shell file to “ENTRYPOINT” statement in “Dockerfile”. We can add multiple
entry-points sh (shell) files as an array format to the “ENTRYPOINT” statement.

Now, we want to makemigrations and migrate everytime the container starts up.
 But the problem is that the database container can take longer to initialise and if we 
 run the above commands before the database is up and running, it can result in an error.
  So we need a way to make sure the database has started. For this, we use an entrypoint 
  script. In the djangoproject directory, make a new file called entrypoint.sh with the
   following contents.

RUN - The Run command is a handy way to quickly run a program in Linux by typing the program 
and executing it.

WHAT IS NETCAT?
Netcat is one of the powerful networking tool, security tool or network monitoring tool.
 It acts like cat command over a network. It is even considered as a Swiss army knife of
 networking tools.
It is generally used for the following reasons:

Operation related to TCP, UDP or UNIX-domain sockets
Port Scanning
Port listening
Port redirection
open Remote connections
Read/Write data across network
Network debugging
Network daemon testing
Simple TCP proxies
A Socks or HTTP Proxy Command for ssh
It is designed by keeping in mind that it should be a flexible “back-end” tool that can be 
used directly or driven by any other program.


ECHO COMMAND 
In computing, echo is a command that outputs the strings that are passed to it as arguments.
 ... It is a command available in various operating system shells and typically used in shell 
 scripts and batch files to output status text to the screen or a computer file, or as a 
 source part of a pipeline.

 PYTHONUNBUFFERED 
 to a non empty value ensures that the python output is sent straight to terminal


 WORKDIR 
  Change the working directory. 
 Every command after this will be run from the /code directoryif /code is the working directory 


 REFER TO THIS ARTICLE 
 https://hedonhermdev.github.io/posts/django-on-docker/

 ENTRYPOINT.SH FILE 
 What is the use/meaning of "#!/bin/sh" in shell scripting?
A shell script is a text file that contains a sequence of commands for a UNIX-based operating system. 


WHAT DOES THE USER COMMAND SIGNIFY
https://www.geeksforgeeks.org/docker-user-instruction/  
By default, a Docker Container runs as a Root user. This poses a great security threat if you 
deploy your applications on a large scale inside Docker Containers. You can change or switch to a different 
user inside a Docker Container using the USER Instruction

RUN groupadd -r user && useradd -r -g user user
USER user

In the above dockerfile, we have pulled the base Image Ubuntu and updated it. We have created a 
new group called user and a new user inside the group with the same name. Using the USER option,
we have then switched the user.


WHAT DOES THE RUN CHOWN COMMAND DO ?
https://www.rockyourcode.com/til-docker-chown-copies-all-files/#:~:text=The%20chown%20command%20adds%20another,container%20image%20contains%20both%20layers.
The chown command adds another layer to the image without deleting the previous layers.

That means, that the final container image contains both layers. Thus, the size of the container 
adds the size of both folders: the original working directory for the root user, and the second 
working directory with permissions for the normal user.

Since Docker 17.09.0-ce(2017-09-26) you can add a flag to the copy command:

COPY --chown=<user>:<group>
This flag avoids the extra layer.


WHAT ARE DNS RECORDS?
https://www.cloudwards.net/what-are-dns-records/#:~:text=Types%20of%20DNS%20Records%201%20A%20Record.%20An,4%20TXT%20Record.%20...%205%20AAAA%20Record.%20
Each website has a specific IP address, and the DNS records pair that IP address 
to the domain name so users don’t need to remember the numeric line.

NGINX ERROR LOGS
https://betterstack.com/community/guides/logging/linux/how-to-view-and-configure-nginx-access-and-error-logs/
Step 2 — Viewing Nginx Logs
If you are working from an operating system with the UI, the easiest way to view stored logs is by opening files in the text editor. However, sometimes you need to view the content of the files directly in the terminal. In this case, there are few ways to do it.

You can tail command to view logs in real time:

Copied!  Copy code
tail -f /var/log/nginx/access.log
The tail command is used to print the last 10 lines from the selected file. With the -f option, the tail command will be viewing the content of the file in real-time.

To view the full content of the file, you can use the cat command:

Copied!  Copy code
cat /var/log/nginx/access.log
You may also want to find a specific term in the file. In that case, you can use the grep command:

Copied!  Copy code
grep GET /var/log/nginx/access.log